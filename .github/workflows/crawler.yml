name: Crawler
on: 
  # push:
  schedule:
    - cron:  "1 1 * * *" # 實際執行時間是這個時間加八小時
    - cron:  "1 5 * * *" # 實際執行時間是這個時間加八小時
    - cron:  "1 9 * * *" # 實際執行時間是這個時間加八小時
    - cron:  "1 13 * * *" # 實際執行時間是這個時間加八小時
    - cron:  "1 17 * * *" # 實際執行時間是這個時間加八小時
    - cron:  "1 21 * * *" # 實際執行時間是這個時間加八小時
  workflow_dispatch:
permissions:
  contents: write
jobs:
  build-and-deploy:
    concurrency: ci-${{ github.ref }} # Recommended if you intend to make multiple deployments in quick succession.
    runs-on: ubuntu-20.04
    steps:
      # ----------------------------------------------------------------
      
      - name: Checkout 🛎️
        uses: actions/checkout@v3

      # ----------------------------------------------------------------
      # https://github.com/orgs/community/discussions/26351#discussioncomment-3251597

      - name: free disk space
        run: | 
          sudo swapoff -a 1> /dev/null
          sudo rm -f /swapfile 1> /dev/null
          sudo apt clean 1> /dev/null
          docker rmi $(docker image ls -aq) 1> /dev/null
          df -h

      # ----------------------------------------------------------------

      # - uses: satackey/action-docker-layer-caching@v0.0.11
      #   # Ignore the failure of a step and avoid terminating the job.
      #   continue-on-error: true

      # ----------------------------------------------------------------

      # - name: Cache Restore
      #   id: cache-restore
      #   uses: actions/cache/restore@v3
      #   env:
      #     cache-name: cache
      #   with:
      #     path: |
      #       cache
      #       output
      #     key: ${{ runner.os }}-build-${{ env.cache-name }}
      #     restore-keys: |
      #       ${{ runner.os }}-build-${{ env.cache-name }}
      #       ${{ runner.os }}-build-
      #       ${{ runner.os }}-

      - name: Cache
        id: cache
        uses: actions/cache@v3
        env:
          cache-name: cache
        with:
          path: |
            cache
            output
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # ----------------------------------------------------------------

      # - name: Clean Cache & Output
      #   run: |
      #     rm -rf ./cache/* || true
      #     rm -rf ./output/* || true
      
      # - name: Clean Cache
      #   run: |
      #     rm -rf ./cache/* || true
      

      # - name: Clean Cache node-cache.sqlite
      #   run: |
      #     rm -rf ./cache/node-cache-sqlite*

      # - name: Clean Object Cache node-cache.sqlite
      #   run: |
      #     rm -f ./cache/node-cache-sqlite_*object*.sqlite

      # - name: Clean output gitignore
      #   run: |
      #     rm -f ./output/.gitignore

      # - name: Clean output "Invalid date-"
      #   run: |
      #     ls -lh ./output/*/Invalid* || true
      #     rm -f ./output/*/Invalid*
      #     find ./output/*/ -type f -name '*"' -exec rm {} \;

      # - name: List output "Invalid date-"
      #   run: |
      #     ls -lh ./output/*/Invalid* || true

      # - name: Clean Cache
      #   run: |
      #     rm -rf ./cache/*
      #     docker rmi -f $(docker images -aq)
      #     docker network prune -f
      #     docker volume prune -f

      - name: Clean Cache
        run: |
          rm -rf ./output/cache

      # - name: Remove unsubscribe channels
      #   run: |
      #     rm -rf ./output/meisouniv-news-ch_UCiCOKR_WkqZuYN9fpjWqnzg*
      #     rm -rf ./output/KC-Huang-917POPRadio-ch_UCJ5rBA0z4WFGtUTS83sAb_A*
      
      # ----------------------------------------------------------------

      # - name: Prepare Cache
      #   run: |
      #     mkdir -p cache
      #     echo `date` > cache/trigger.txt
      #     mkdir -p output
      #     echo `date` > output/trigger.txt

      # - name: Clean download failed cache
      #   run: |
      #     rm -rf ./cache/node-cache-sqlite_UBMp3DownloadFailed.sqlite

      # - name: Clean old downloaded
      #   run: |
      #     rm -rf output/*/0*
      #     rm -rf output/*/1*

      # -----------------------------------------------------
      
      - name: Check Cache Size Before
        run: |
          ls -lh ./cache/*.sqlite || true

      - name: Output Calculate Before
        run: |
          ./action/folder_stats.sh ./output || true
          ls -lh ./output/*.rss || true
      
      # ----------------------------------------------------------------

      # - name: Main
      #   run: |
      #     bash ./action/install_docker_compose.sh
      #     docker-compose up --abort-on-container-exit

      - name: Main
        run: |
          docker compose up --quiet-pull --abort-on-container-exit
          exit
          

      # ----------------------------------------------------------------

      - name: Check Cache Size After
        run: |
          ls -lh ./cache/*.sqlite || true

      - name: Output Calculate After
        run: |
          ./action/folder_stats.sh ./output || true
          ls -lh ./output/*.rss || true

      # - name: Cache Save
      #   id: cache-save
      #   uses: actions/cache/save@v3
      #   env:
      #     cache-name: cache
      #   with:
      #     path: |
      #       cache
      #       output
      #     key: ${{ runner.os }}-build-${{ env.cache-name }}


      - name: After List output "Invalid date-"
        run: |
          ls -lh ./output/*/Invalid* || true

      - name: Remove .gitignore
        run: |
          rm -rf ./output/.gitignore || true
        
      # ----------------------------------------------------------------

      - name: Deploy 🚀
        uses: JamesIves/github-pages-deploy-action@v4.6.5
        with:
          folder: output # The folder the action should deploy.

      # ----------------------------------------------------------------

      # - name: Set up Git
      #   run: |
      #     git config user.name "github-actions[bot]"
      #     git config user.email "github-actions[bot]@users.noreply.github.com"

      # - name: Fetch gh-pages branch
      #   run: |
      #     mkdir -p /tmp/gh-pages
      #     mv ./output/* /tmp/gh-pages/

      #     git fetch origin gh-pages --depth=1
      #     git checkout gh-pages

      # - name: Remove all history except latest commit
      #   run: |
      #     last_commit=$(git log -n 1 --pretty=format:%H | head -n 1)
      #     git reset --soft $last_commit

      #     # rm -rf *

      #     rsync -a --delete /tmp/gh-pages/ ./

      #     git add .
      #     git commit --amend -m "Keep only the latest commit: ${{ github.sha }}"

      #     git gc --aggressive --prune=now
          
      #     git push --force origin gh-pages